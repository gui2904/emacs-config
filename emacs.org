#+title gui emacs config :3
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome!
This is my emacs configuration file build from scratch, now written in Org Mode. This file generates init.el which can be loaded by Emacs at startup.

*NOTE*: I do not provide support

* Package System Setup

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-packages on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp 

  (defvar clover/default-font-size 120)

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)	;Disable visible scrollbar
  (tool-bar-mode -1)	;Disable the toolbar
  (tooltip-mode -1)	;Disable tooltips
  (set-fringe-mode 10)	;Give some breathing room

  (menu-bar-mode -1)	;Disable the menu bar

  (setq visual-line-mode t)

  ;; Set up the visible bell
  (setq visible-bell t) 

  ;; Enable line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))


#+end_src

** Font Configuration

#+begin_src emacs-lisp 

  (set-face-attribute 'default nil :family "Fira Code Retina" :height clover/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :family "Fira Code Retina" :height 120)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :family "Cantarell" :height 100 :weight 'regular)
  
#+end_src


* Keybinding Configuration

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (unless (package-installed-p 'evil)
    (package-install 'evil))

  ;; Enable Evil
  (setq evil-want-keybinding nil)
  (require 'evil)
  (evil-mode 1)
  (when (require 'evil-collection nil t)
    (evil-collection-init))
  
#+end_src

* UI Configuration

** Color Theme
[[https://github.com/doomemacs/themes][doom-themes]] is a great set of themes with lots of variety and support for many different Emacs modes, examples of themes can he found [[https://github.com/doomemacs/themes/tree/screenshots][here!]] You can run =M-x counsel-load-theme= to easily change the current theme.

#+begin_src emacs-lisp

  (use-package doom-themes ;; counsel-load-theme
    :init (load-theme 'doom-laserwave t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] attractive yet minimal modeline config for Emacs. Check out [[https://github.com/seagle0128/doom-modeline#customize][here]] for more things you can enable or disable

*NOTE*: The first time you load your configuration on a new machine, you will need to run =M-x all-the-icons-install-fonts= so that it displays correctly

#+begin_src emacs-lisp

  (use-package all-the-icons)

  ;; bar at the of the buffer
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI that appears when you start typing any key bindings in Emacs, and offers all possible completions for the prefix. For example, if you press C-c (hold control and press the letter c), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.

#+begin_src emacs-lisp

  ;; which key mini buffer
  (require 'which-key)
  (which-key-mode)

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

  ;; Ivy config ----
  (use-package ivy
    :diminish 
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  ;; Little description next to the command 
  (require 'ivy-rich)
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)

  ;; replace some commands for better ones
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function) ;; C-h f
    ([remap describe-command] . helpful-command) ;; C-h c
    ([remap describe-variable] . counsel-describe-variable) ;; C-h v
    ([remap describe-key] . helpful-key)) ;; C-h k

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the best features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

These are the font configations in Org Mode, which will tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document.

#+begin_src emacs-lisp

  (require 'org)
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :family "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun clover/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . clover/org-mode-setup)
    :config
    (setq org-ellipsis " ↴")
  
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
  
    (setq org-agenda-files
          '("~/notes/OrgFiles/tasks.org"
            "~/notes/OrgFiles/habits.org"
            "~/notes/OrgFiles/birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets ;; Will move DONE tasks
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling! will save all org buffers after refiling basically
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
    (setq org-tag-alist
          '((:startgroup)
             ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
  
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/notes/OrgFiles/tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/notes/OrgFiles/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/notes/OrgFiles/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/notes/OrgFiles/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/notes/OrgFiles/metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j") ;; Thats how you define global keys, this one will take us to org-capture jj, just by pressing C-c j
                (lambda () (interactive) (org-capture nil "jj")))
  
    (setq org-hide-emphasis-markers t));; Hides the wrap characters, like the * for bold
  
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading start in =org-mode= buffers with nicer looking characters that you can control.  

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  
#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior. 

#+begin_src emacs-lisp

  (defun clover/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . clover/org-mode-visual-fill))
  
#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you will need to setup =org-babel-load-languages= for each language you would like to use. [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Here]] you can find all languages supported by =org-babel=

#+begin_src emacs-lisp

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

   (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;; (add-to-list 'org-structure-template-alist '("py" . "src python")) 

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun clover/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'clover/org-babel-tangle-config)))
  
#+end_src


* Development

** Languages

*** COMMENT Language Servers

#+begin_src emacs-lisp
   
  ;(use-package lsp-mode
  ;  :ensure
  ;  :commands (lsp lsp-deferred)
  ; :hook (lsp-mode . efs/lsp-mode-setup)
    ;:init
 ;   (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    ;:custom
    ;(lsp-rust-analyzer-cargo-watch-command "clippy")
   ; (lsp-eldoc-render-all t)
    ;(lsp-idle-delay 0.6)
   ; :config
    ;(add-hook 'lsp-mode-hook 'lsp-ui-mode)
    ;(lsp-enable-which-key-integration t))

#+end_src

*** Rust

**** Rustic
[[https://github.com/brotzeit/rustic][rustic]] is an extension of rust-mode which adds a number of useful features (see the its github readme) to it. Most of rustics features are bound to the =C-c C-c= prefix. You can use C-c C-c C-r to run the program via =cargo run=. You will be asked for parameters and can for example specify =--release= to run in release mode or   =--bin other-bin= to run the target named “other-bin” (instead of main.rs). To pass parameters to the executable itself use =-- --arg1 --arg2=. 

The shortcut =C-c C-c C-c= will run the test at point. Very handy to run inline tests and to not always have switch back-and-forth between a terminal and Emacs. =C-c C-p= opens a popup buffer Rustic provides even more helpful integration with cargo, e.g. =M-x rustic-cargo-add= will allow you to add dependencies to your projects =Cargo.toml=

If you would like to share a code snippet with others, =M-x rustic-playpen= will open your current buffer in https://play.rust-lang.org where you can run the Rust code online and get a shareable link.
 
Code formatting on save is enabled and will use rustfmt. To disable it set (setq rustic-format-on-save nil). You can still format a buffer on demand using =C-c C-c C-o=.

#+begin_src emacs-lisp

  (use-package rustic
    :ensure
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
                                          ;(setq rustic-format-on-save t)
    (setq rustic-format-trigger 'on-save))

  (defun rustic-mode-auto-save-hook ()
    "Enable auto-saving in rustic-mode buffers."
    (when buffer-file-name
      (setq-local compilation-ask-about-save nil)))
  (add-hook 'rustic-mode-hook 'rustic-mode-auto-sav-hook)

#+end_src


*** TypeScript

This is a basic configuration for the TypeScript language so that .ts files activate typescript-mode when opened. We’re also adding a hook to typescript-mode-hook to call lsp-deferred so that we activate lsp-mode to get LSP features every time we edit TypeScript code.
=npm install -g typescript-language-server typescript=

#+begin_src emacs-lisp

  ;(use-package typescript-mode
  ;  :mode "\\.ts\\'"
   ; :hook (typescript-mode . lsp-deferred)
    ;:config
   ; (setq typescript-indent-level 2))
  
#+end_src
** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))


  ;; C-c p f to find file, then M-o for more things to do
  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Rainbow Delimeters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Applications

#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp



#+end_src

