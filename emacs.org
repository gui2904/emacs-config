#+title gui emacs config :3
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome!
This is my emacs configuration file build from scratch, now written in Org Mode. This file generates init.el which can be loaded by Emacs at startup.

*NOTE*: I do not provide support

* Startup Performance

#+begin_src emacs-lisp

  (defun clover/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'clover/display-startup-time)

#+end_src

* Package System Setup

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-packages on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

*** Automatically update

#+begin_src emacs-lisp

  ;; (use-package auto-package-update
  ;;   :custom
  ;;   (auto-package-update-interval 7) ;; interval to update in days
  ;;   (auto-package-update-prompt-before-update t)
  ;;   (auto-package-update-hide-results t) ;; hide updated packages, nil to show
  ;;   :config
  ;;   (auto-package-update-maybe) ;; will check wether it needs an update at startup time
  ;;   (auto-package-update-at-time "09:00"))

#+end_src

* Basic UI Configuration

#+begin_src emacs-lisp 

  (defvar clover/default-font-size 120)

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)	;Disable visible scrollbar
  (tool-bar-mode -1)	;Disable the toolbar
  (tooltip-mode -1)	;Disable tooltips
  (set-fringe-mode 10)	;Give some breathing room

  (menu-bar-mode -1)	;Disable the menu bar

  (setq visual-line-mode t)

  ;; Set up the visible bell
  (setq visible-bell t) 

  ;; Enable line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (add-hook 'prog-mode-hook
            (lambda ()
              (setq-default tab-width 2)
              (setq indent-tabs-mode nil)))

  (add-hook 'nix-mode-hook (lambda () (setq tab-width 2)))

    #+end_src

** Font Configuration

#+begin_src emacs-lisp 

  (set-face-attribute 'default nil :family "Fira Code" :height clover/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :family "Fira Code" :height 120)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :family "Cantarell" :height 100 :weight 'regular)
  
#+end_src


* Keybinding Configuration

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; (unless (package-installed-p 'evil)
  ;;   (package-install 'evil))

  ;; (use-package evil-collection
  ;;   :ensure t
  ;;   :after evil
  ;;   :init
  ;;   (evil-collection-init))

  ;; ;; Enable Evil
  ;; (setq evil-want-keybinding nil)
  ;; (require 'evil)
  ;; (evil-mode 1)
  ;; (when (require 'evil-collection nil t)
  ;;   (evil-collection-init))

  ;; Makes "jk" quit insert mode
  (defun my-jk ()
    (interactive)
    (let* ((initial-key ?j)
           (final-key ?k)
           (timeout 0.5)
           (event (read-event nil nil timeout)))
      (if event
          ;; timeout met
          (if (and (characterp event) (= event final-key))
              (evil-normal-state)
            (insert initial-key)
            (push event unread-command-events))
        ;; timeout exceeded
        (insert initial-key))))

  (define-key evil-insert-state-map (kbd "j") 'my-jk)


#+end_src

* UI Configuration

** Color Theme
[[https://github.com/doomemacs/themes][doom-themes]] is a great set of themes with lots of variety and support for many different Emacs modes, examples of themes can he found [[https://github.com/doomemacs/themes/tree/screenshots][here!]] You can run =M-x counsel-load-theme= to easily change the current theme.

#+begin_src emacs-lisp

  (use-package doom-themes ;; counsel-load-theme
    :init (load-theme 'doom-peacock t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] attractive yet minimal modeline config for Emacs. Check out [[https://github.com/seagle0128/doom-modeline#customize][here]] for more things you can enable or disable

*NOTE*: The first time you load your configuration on a new machine, you will need to run =M-x all-the-icons-install-fonts= so that it displays correctly

#+begin_src emacs-lisp

  (use-package all-the-icons)

  ;; bar at the of the buffer
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI that appears when you start typing any key bindings in Emacs, and offers all possible completions for the prefix. For example, if you press C-c (hold control and press the letter c), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.

#+begin_src emacs-lisp

  ;; which key mini buffer
  (require 'which-key)
  (which-key-mode)

#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

    ;; Ivy config ----
    (use-package ivy
      :diminish 
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    ;; Little description next to the command 
    (require 'ivy-rich)
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)

    ;; replace some commands for better ones
    (use-package counsel
      :bind (("C-M-j" . 'counsel-switch-buffer)
             ("M-x" . counsel-M-x)
             ("C-x b" . counsel-ibuffer)
             ("C-x C-f" . counsel-find-file)
             :map minibuffer-local-map
             ("C-r" . 'counsel-minibuffer-history)))

#+end_src

** Helpful Help Commands

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function) ;; C-h f
    ([remap describe-command] . helpful-command) ;; C-h c
    ([remap describe-variable] . counsel-describe-variable) ;; C-h v
    ([remap describe-key] . helpful-key)) ;; C-h k

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the best features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

These are the font configations in Org Mode, which will tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document.

#+begin_src emacs-lisp

  (require 'org)
  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :family "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

#+end_src

** Basic Config

#+begin_src emacs-lisp

  (defun clover/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . clover/org-mode-setup)
    :config
    (setq org-ellipsis " ↴")
  
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
  
    (setq org-agenda-files
          '("~/notes/OrgFiles/tasks.org"
            "~/notes/OrgFiles/habits.org"
            "~/notes/OrgFiles/birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets ;; Will move DONE tasks
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling! will save all org buffers after refiling basically
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
    (setq org-tag-alist
          '((:startgroup)
             ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))
  
    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/notes/OrgFiles/tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/notes/OrgFiles/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/notes/OrgFiles/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/notes/OrgFiles/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/notes/OrgFiles/metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j") ;; Thats how you define global keys, this one will take us to org-capture jj, just by pressing C-c j
                (lambda () (interactive) (org-capture nil "jj")))
  
    (setq org-hide-emphasis-markers t));; Hides the wrap characters, like the * for bold
  
#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading start in =org-mode= buffers with nicer looking characters that you can control.  

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
  
#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior. 

#+begin_src emacs-lisp

  (defun clover/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . clover/org-mode-visual-fill))
  
#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you will need to setup =org-babel-load-languages= for each language you would like to use. [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Here]] you can find all languages supported by =org-babel=

#+begin_src emacs-lisp

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

   (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;; (add-to-list 'org-structure-template-alist '("py" . "src python")) 

#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun clover/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'clover/org-babel-tangle-config)))
  
#+end_src

#+begin_src emacs-lisp

(require 'ox-md)

  (defun org-to-readme ()
    "Export the current Org file to README.md."
    (interactive)
    (let ((output-file "README.md"))
      (org-export-to-file 'md output-file)
      (message "Exported to %s" output-file)))
  
#+end_src


* Development

** Languages

*** COMMENT Language Servers

#+begin_src emacs-lisp


  ;; (defun clover/lsp-mode-setup ()
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode))

  ;; (use-package lsp-mode
  ;;   :commands (lsp lsp-deferred)
  ;;   :hook (lsp-mode . clover/lsp-mode-setup)
  ;;   :init
  ;;   (setq lsp-keymap-prefix "C-c l")
  ;;   :config
  ;;   (lsp-enable-which-key-integration t))



#+end_src

*** Rust

**** Rustic
[[https://github.com/brotzeit/rustic][rustic]] is an extension of rust-mode which adds a number of useful features (see the its github readme) to it. Most of rustics features are bound to the =C-c C-c= prefix. You can use C-c C-c C-r to run the program via =cargo run=. You will be asked for parameters and can for example specify =--release= to run in release mode or   =--bin other-bin= to run the target named “other-bin” (instead of main.rs). To pass parameters to the executable itself use =-- --arg1 --arg2=. 

The shortcut =C-c C-c C-c= will run the test at point. Very handy to run inline tests and to not always have switch back-and-forth between a terminal and Emacs. =C-c C-p= opens a popup buffer Rustic provides even more helpful integration with cargo, e.g. =M-x rustic-cargo-add= will allow you to add dependencies to your projects =Cargo.toml=

If you would like to share a code snippet with others, =M-x rustic-playpen= will open your current buffer in https://play.rust-lang.org where you can run the Rust code online and get a shareable link.
 
Code formatting on save is enabled and will use rustfmt. To disable it set (setq rustic-format-on-save nil). You can still format a buffer on demand using =C-c C-c C-o=.

#+begin_src emacs-lisp

  (use-package rustic
    :ensure
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
                                          ;(setq rustic-format-on-save t)
    (setq rustic-format-trigger 'on-save))

  (defun rustic-mode-auto-save-hook ()
    "Enable auto-saving in rustic-mode buffers."
    (when buffer-file-name
      (setq-local compilation-ask-about-save nil)))
  (add-hook 'rustic-mode-hook 'rustic-mode-auto-sav-hook)

#+end_src

*** Python

C-c C-c       python-shell-send-buffer
C-c C-d       python-describe-at-point
C-c C-f       python-eldoc-at-point
C-c C-j       imenu
C-c C-l       python-shell-send-file
C-c C-p       run-python
C-c C-r       python-shell-send-region
C-c C-s       python-shell-send-string
C-c C-t       Prefix Command
C-c C-v       python-check
C-c C-z       python-shell-switch-to-shell
C-c <     python-indent-shift-left
C-c >     python-indent-shift-right

C-c C-t c python-skeleton-class
C-c C-t d python-skeleton-def
C-c C-t f python-skeleton-for
C-c C-t i python-skeleton-if
C-c C-t m python-skeleton-import
C-c C-t t python-skeleton-try
C-c C-t w python-skeleton-while


*** TypeScript

This is a basic configuration for the TypeScript language so that .ts files activate typescript-mode when opened. We’re also adding a hook to typescript-mode-hook to call lsp-deferred so that we activate lsp-mode to get LSP features every time we edit TypeScript code.
=npm install -g typescript-language-server typescript=

#+begin_src emacs-lisp

  ;(use-package typescript-mode
  ;  :mode "\\.ts\\'"
   ; :hook (typescript-mode . lsp-deferred)
    ;:config
   ; (setq typescript-indent-level 2))
  
#+end_src


*** Tree-Sitter

#+begin_src emacs-lisp

  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode))

  (use-package tree-sitter-langs
    :ensure t)

  (setq go-ts-mode-indent-offset 2)

#+end_src

#+begin_src emacs-lisp

  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (cmake "https://github.com/uyha/tree-sitter-cmake")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (go "https://github.com/tree-sitter/tree-sitter-go")
          (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
          (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (toml "https://github.com/tree-sitter/tree-sitter-toml")
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
          (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
          ;; (nix "https://github.com/nix-community/tree-sitter-nix")
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")))


#+end_src

*** Nix

#+begin_src emacs-lisp

  ;; (use-package nix-ts-mode
  ;;  :mode "\\.nix\\'")

#+end_src


** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))


  ;; C-c p f to find file, then M-o for more things to do
  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Rainbow Delimeters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Backup settings

create emacs-temp if does not exist

#+begin_src emacs-lisp

  (unless (file-exists-p "~/.emacs-temp")
    (mkdir "~/.emacs-temp"))

#+end_src

#+begin_src emacs-lisp

  (let ((backup-dir "~/.emacs-temp/")
        (auto-saves-dir "~/.emacs-temp/"))
    (dolist (dir (list backup-dir auto-saves-dir))
      (when (not (file-directory-p dir))
        (make-directory dir t)))
    (setq backup-directory-alist `(("." . ,backup-dir))
          auto-save-file-name-transforms `((".*" ,auto-saves-dir t))
          auto-save-list-file-prefix (concat auto-saves-dir ".saves-")
          tramp-backup-directory-alist `((".*" . ,backup-dir))
          tramp-auto-save-directory auto-saves-dir
          ))

  (setq backup-by-copying t    ; Don't delink hardlinks                           
        delete-old-versions t  ; Clean up the backups                             
        version-control t      ; Use version numbers on backups,                  
        kept-new-versions 5    ; keep some new versions                           
        kept-old-versions 2)   ; and some old ones, too                           

  (setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/var/tmp/\\1" t)))

#+end_src

* Terminals
** term-mode
=term-mode= is a built-in terminal emulator in Emacs. Because it is written in Emacs Lisp, you can start using it immediately with very little configuration. If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably. However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=. The speed will only be an issue if you regularly run console apps with a lot of output.
One important thing to understand is =line-mode= versus =char-mode=. =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal. While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings. If you’re just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.
With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil’s insert mode (press =i=). You will automatically be switched back to =line-mode= when you enter Evil’s normal mode (press =ESC=).
Run a terminal with =M-x term=!
*Useful key bindings:*
- =C-c C-p= / =C-c C-n= - go back and forward in the buffer’s prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil’s Insert mode
  
#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

** Better term-mode colors
The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to. Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program. Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp


  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm
[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications. This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src

** eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs’ own shell implementation written in Emacs Lisp. It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc). It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=). Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don’t work as well. However, many of these limitations can be dealt with by good configuration and installing external packages, so don’t let that discourage you from trying it!

*Useful key bindings:*
- =C-c C-p= / =C-c C-n= - go back and forward in the buffer’s prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.
For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- [[For more thoughts on Eshell, check out these articles by Pierre Neidhardt:]]
- [[For more thoughts on Eshell, check out these articles by Pierre Neidhardt:]]

#+begin_src emacs-lisp

  (defun clover/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . clover/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))

#+end_src

** File Management

*** Dired

*Key Bindings*

**** Navigation:
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
-=^= - go to parent directory
- =S-RET= / =g O= - Open file in “other” window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a “preview” mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files:
- =m= - Marks a file
-  =u= - Unmarks a file
- =U= - Unmarks all files in buffer
-  =* t= / =t= - Inverts marked files in buffer
-  =% m= - Mark files in buffer using regular expression
-  =*= - Lots of other auto-marking functions
-  =k= / =K= - “Kill” marked items (refresh buffer with =g= / =g r= to get them back)
-  Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files:
- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them! Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files:
- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives:
- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations:
- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

#+begin_src emacs-lisp

  (autoload 'dired-single-buffer "dired-single" "" t)
  (autoload 'dired-single-buffer-mouse "dired-single" "" t)
  (autoload 'dired-single-magic-buffer "dired-single" "" t)
  (autoload 'dired-single-toggle-buffer-name "dired-single" "" t)

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")) ;; puts the directories first and files after in the dired view
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file
      "n" 'dired-create-empty-file
      "N" 'dired-create-directory))

  (use-package dired-open
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (setq delete-by-moving-to-trash t)

#+end_src

*** dired hide dotfiles
This allows to hide dotfiles from any directory with the purpose of getting a clearner view of the directory.

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src

*** all the icons dired

#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
    :config
    ;; Install fonts if not already installed
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t))) ;; `t` skips confirmation

#+end_src

* Applications

#+begin_src emacs-lisp

#+end_src


#+begin_src emacs-lisp



#+end_src

